---
- name: Manage k8s
  hosts:
    - localhost
  vars_files:
    - vars/main.yml
  environment:
    K8S_AUTH_VERIFY_SSL: no
  tasks:
    - name: Read kubeconfig
      include_vars:
        file: "{{ kubeconfig_path }}"
        name: k8s_config
      tags:
        - helm
        - wp

    - debug: var=k8s_config.clusters[0].cluster.server
    - debug: var=k8s_config.users[0].user.token

    - name: Create a k8s namespace cert-manager
      k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        host: "{{ k8s_config.clusters[0].cluster.server }}"
        api_key: "{{ k8s_config.users[0].user.token }}"
        name: cert-manager
        api_version: v1
        kind: Namespace
        state: present

    - name: Download cert-manager crds
      get_url:
        url: https://github.com/jetstack/cert-manager/releases/download/v0.14.1/cert-manager.crds.yaml
        dest: "{{ playbook_dir }}/k8s/cert-manager.crds.yaml"
        mode: '0664'

    - name: Apply cert-manager crds manifest
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        host: "{{ k8s_config.clusters[0].cluster.server }}"
        api_key: "{{ k8s_config.users[0].user.token }}"
        state: present
        src: "{{ playbook_dir }}/k8s/cert-manager.crds.yaml"
        namespace: cert-manager

    - name: Pause to finish crds resources creation
      pause:
        seconds: 10

    - name: Apply LE cert-manager (staging)
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        host: "{{ k8s_config.clusters[0].cluster.server }}"
        api_key: "{{ k8s_config.users[0].user.token }}"
        definition: "{{ cert_manager_le_staging_manifest }}"
        namespace: cert-manager

    - name: Apply LE cert-manager (prd)
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        host: "{{ k8s_config.clusters[0].cluster.server }}"
        api_key: "{{ k8s_config.users[0].user.token }}"
        definition: "{{ cert_manager_le_prd_manifest }}"
        namespace: cert-manager

    - name: Add bitnami repository
      kubernetes.core.helm_repository:
        name: bitnami
        repo_url: https://charts.bitnami.com/bitnami

    - name: Add ingress-nginx repository
      kubernetes.core.helm_repository:
        name: ingress-nginx
        repo_url: https://kubernetes.github.io/ingress-nginx

    - name: Add jetstack repository
      kubernetes.core.helm_repository:
        name: jetstack
        repo_url: https://charts.jetstack.io

    - name: Deploy cert-manager
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_path }}"
        host: "{{ k8s_config.clusters[0].cluster.server }}"
        api_key: "{{ k8s_config.users[0].user.token }}"
        update_repo_cache: yes
        name: cert-manager
        chart_ref: jetstack/cert-manager
        chart_version: v0.14.1
        state: "{{ cert_manager_deployment_state }}"
        release_namespace: cert-manager
        create_namespace: true
        wait: yes

    - name: Deploy ingress-nginx
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_path }}"
        host: "{{ k8s_config.clusters[0].cluster.server }}"
        api_key: "{{ k8s_config.users[0].user.token }}"
        update_repo_cache: yes
        name: ingress-nginx
        chart_ref: ingress-nginx/ingress-nginx
        state: "{{ ingress_deployment_state }}"
        release_namespace: default
        create_namespace: true
        wait: yes

    - name: populate values.yml
      template:
        dest: "{{ playbook_dir }}/k8s/values/{{ item.name }}.yml"
        src: templates/values.yml.j2
        mode: '0664'
      loop: "{{ wordpress_deployments }}"

    - name: Deploy wordpress
      kubernetes.core.helm:
        kubeconfig: "{{ kubeconfig_path }}"
        host: "{{ k8s_config.clusters[0].cluster.server }}"
        api_key: "{{ k8s_config.users[0].user.token }}"
        update_repo_cache: yes
        name: "wordpress-{{ item.name }}"
        state: "{{ item.state | default(wordpress_deployment_state) }}"
        wait: "{{ item.wait | default('no') }}"
        chart_ref: bitnami/wordpress
        release_namespace: "{{ item.namespace | default('default') }}"
        create_namespace: true
        values_files:
          - "{{ playbook_dir }}/k8s/values/{{ item.name }}.yml"
      tags:
        - wp
        - helm
      loop: "{{ wordpress_deployments }}"

    - name: include tests
      include: tests.yml
